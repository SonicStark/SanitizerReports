

>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/use-after-scope-capture.cpp <<HEAD<<

=================================================================
==2814029==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7f40f8500060 at pc 0x560e78af483e bp 0x7ffef4fe7780 sp 0x7ffef4fe7778
READ of size 4 at 0x7f40f8500060 thread T0
    #0 0x560e78af483d in main::$_0::operator()() const /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-capture.cpp:10:14
    #1 0x560e78af46d0 in _M_invoke /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:285:9
    #2 0x560e78af46d0 in operator() /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14
    #3 0x560e78af46d0 in main /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-capture.cpp:15:10
    #4 0x7f40fa9eb082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #5 0x560e789c52dd in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/use-after-scope-capture.cpp.tmp+0x1e2dd)

Address 0x7f40f8500060 is located in stack of thread T0 at offset 96 in frame
    #0 0x560e78af458f in main /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-capture.cpp:5

  This frame has 2 object(s):
    [32, 64) 'f' (line 6)
    [96, 100) 'x' (line 8) <== Memory access at offset 96 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-scope /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-capture.cpp:10:14 in main::$_0::operator()() const
Shadow bytes around the buggy address:
  0x7f40f84ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f40f84ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f40f84ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f40f84fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f40f84fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f40f8500000: f1 f1 f1 f1 00 00 00 00 f2 f2 f2 f2[f8]f3 f3 f3
  0x7f40f8500080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f40f8500100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f40f8500180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f40f8500200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f40f8500280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2814029==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/use-after-scope-capture.cpp <<TAIL<<

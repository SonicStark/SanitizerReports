

>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/printf-5.c <<HEAD<<

=================================================================
==2811900==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f5282700062 at pc 0x5593c89ee144 bp 0x7ffdee9360a0 sp 0x7ffdee935860
READ of size 3 at 0x7f5282700062 thread T0
    #0 0x5593c89ee143 in printf_common(void*, char const*, __va_list_tag*) /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_format.inc:496:3
    #1 0x5593c89ee88a in __interceptor_vprintf /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1714:1
    #2 0x5593c89ee966 in printf /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1772:1
    #3 0x5593c8aaa968 in main /home/llvm/compiler-rt/test/asan/TestCases/printf-5.c:18:3
    #4 0x7f5284c76082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #5 0x5593c897e2dd in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/printf-5.c.tmp+0x1d2dd)

Address 0x7f5282700062 is located in stack of thread T0 at offset 98 in frame
    #0 0x5593c8aaa7af in main /home/llvm/compiler-rt/test/asan/TestCases/printf-5.c:12

  This frame has 5 object(s):
    [32, 33) 'c' (line 13)
    [48, 52) 'x' (line 14)
    [64, 68) 'f' (line 15)
    [80, 83) 's' (line 16)
    [96, 98) 'fmt' (line 17) <== Memory access at offset 98 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_format.inc:496:3 in printf_common(void*, char const*, __va_list_tag*)
Shadow bytes around the buggy address:
  0x7f52826ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f52826ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f52826ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f52826fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f52826fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f5282700000: f1 f1 f1 f1 01 f2 04 f2 04 f2 03 f2[02]f3 f3 f3
  0x7f5282700080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5282700100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5282700180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5282700200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5282700280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2811900==ABORTING
0=================================================================
==2812057==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f6aed700062 at pc 0x55d3d5d63144 bp 0x7ffeceb292e0 sp 0x7ffeceb28aa0
READ of size 3 at 0x7f6aed700062 thread T0
    #0 0x55d3d5d63143 in printf_common(void*, char const*, __va_list_tag*) /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_format.inc:496:3
    #1 0x55d3d5d6388a in __interceptor_vprintf /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1714:1
    #2 0x55d3d5d63966 in printf /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1772:1
    #3 0x55d3d5e1f968 in main /home/llvm/compiler-rt/test/asan/TestCases/printf-5.c:18:3
    #4 0x7f6aefbbb082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #5 0x55d3d5cf32dd in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/printf-5.c.tmp+0x1d2dd)

Address 0x7f6aed700062 is located in stack of thread T0 at offset 98 in frame
    #0 0x55d3d5e1f7af in main /home/llvm/compiler-rt/test/asan/TestCases/printf-5.c:12

  This frame has 5 object(s):
    [32, 33) 'c' (line 13)
    [48, 52) 'x' (line 14)
    [64, 68) 'f' (line 15)
    [80, 83) 's' (line 16)
    [96, 98) 'fmt' (line 17) <== Memory access at offset 98 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_format.inc:496:3 in printf_common(void*, char const*, __va_list_tag*)
Shadow bytes around the buggy address:
  0x7f6aed6ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6aed6ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6aed6ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6aed6fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6aed6fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f6aed700000: f1 f1 f1 f1 01 f2 04 f2 04 f2 03 f2[02]f3 f3 f3
  0x7f6aed700080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6aed700100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6aed700180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6aed700200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6aed700280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2812057==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/printf-5.c <<TAIL<<


>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/printf-5.c <<HEAD<<

/home/llvm/compiler-rt/test/asan/TestCases/printf-5.c:17:26: warning: initializer-string for char array is too long [-Wexcess-initializers]
  volatile char fmt[2] = "%c %d %f %s\n";
                         ^~~~~~~~~~~~~~~
1 warning generated.



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/printf-5.c <<TAIL<<

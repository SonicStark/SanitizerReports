

>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/alloca_overflow_right.cpp <<HEAD<<

=================================================================
==2800507==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffc8194fe61 at pc 0x55e9f5eae69c bp 0x7ffc8194fe10 sp 0x7ffc8194fe08
WRITE of size 1 at 0x7ffc8194fe61 thread T0
    #0 0x55e9f5eae69b in foo(int, int) /home/llvm/compiler-rt/test/asan/TestCases/alloca_overflow_right.cpp:10:14
    #1 0x55e9f5eae704 in main /home/llvm/compiler-rt/test/asan/TestCases/alloca_overflow_right.cpp:16:3
    #2 0x7f74def97082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x55e9f5d7f2ed in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/alloca_overflow_right.cpp.tmp+0x1e2ed)

Address 0x7ffc8194fe61 is located in stack of thread T0
SUMMARY: AddressSanitizer: dynamic-stack-buffer-overflow /home/llvm/compiler-rt/test/asan/TestCases/alloca_overflow_right.cpp:10:14 in foo(int, int)
Shadow bytes around the buggy address:
  0x7ffc8194fb80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffc8194fc00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffc8194fc80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffc8194fd00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffc8194fd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7ffc8194fe00: 00 00 00 00 ca ca ca ca 00 02 cb cb[cb]cb cb cb
  0x7ffc8194fe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffc8194ff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffc8194ff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffc81950000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffc81950080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2800507==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/alloca_overflow_right.cpp <<TAIL<<

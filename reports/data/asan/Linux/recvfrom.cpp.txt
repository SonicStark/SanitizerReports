

>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/Linux/recvfrom.cpp <<HEAD<<

=================================================================
==2792068==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fd54d200025 at pc 0x5577996ad7ca bp 0x7ffd04aecb10 sp 0x7ffd04aec2d0
WRITE of size 10 at 0x7fd54d200025 thread T0
    #0 0x5577996ad7c9 in __interceptor_recvfrom.part.0 /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:6858:5
    #1 0x5577997a5935 in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/recvfrom.cpp:74:3
    #2 0x7fd54f9a1082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x55779967631d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Linux/Output/recvfrom.cpp.tmp+0x1e31d)

Address 0x7fd54d200025 is located in stack of thread T0 at offset 37 in frame
    #0 0x5577997a55cf in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/recvfrom.cpp:50

  This frame has 3 object(s):
    [32, 37) 'buf' (line 52) <== Memory access at offset 37 overflows this variable
    [64, 72) 'client_thread' (line 56)
    [96, 112) 'serveraddr' (line 57)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:6858:5 in __interceptor_recvfrom.part.0
Shadow bytes around the buggy address:
  0x7fd54d1ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd54d1ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd54d1ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd54d1fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd54d1fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7fd54d200000: f1 f1 f1 f1[05]f2 f2 f2 00 f2 f2 f2 00 00 f3 f3
  0x7fd54d200080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd54d200100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd54d200180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd54d200200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd54d200280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2792068==ABORTING
=================================================================
==2794880==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f9d9d1ff025 at pc 0x55ebc52ce6f6 bp 0x7f9d9e3fedb0 sp 0x7f9d9e3fe570
READ of size 10 at 0x7f9d9d1ff025 thread T1
    #0 0x55ebc52ce6f5 in __interceptor_sendto.part.0 /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:6896:5
    #1 0x55ebc539ac22 in client_thread_udp(void*) /home/llvm/compiler-rt/test/asan/TestCases/Linux/recvfrom.cpp:42:15
    #2 0x7f9da19a5608 in start_thread /build/glibc-SzIz7B/glibc-2.31/nptl/pthread_create.c:477:8
    #3 0x7f9da1881132 in __clone /build/glibc-SzIz7B/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Address 0x7f9d9d1ff025 is located in stack of thread T1 at offset 37 in frame
    #0 0x55ebc539aa4f in client_thread_udp(void*) /home/llvm/compiler-rt/test/asan/TestCases/Linux/recvfrom.cpp:30

  This frame has 3 object(s):
    [32, 37) 'buf' (line 32) <== Memory access at offset 37 overflows this variable
    [64, 80) 'serveraddr' (line 36)
    [96, 100) 'addrlen' (line 37)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
Thread T1 created by T0 here:
    #0 0x55ebc5287066 in __interceptor_pthread_create /home/llvm/compiler-rt/lib/asan/asan_interceptors.cpp:208:3
    #1 0x55ebc539a8b7 in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/recvfrom.cpp:71:7
    #2 0x7f9da1786082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16

SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:6896:5 in __interceptor_sendto.part.0
Shadow bytes around the buggy address:
  0x7f9d9d1fed80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9d9d1fee00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9d9d1fee80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9d9d1fef00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9d9d1fef80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f9d9d1ff000: f1 f1 f1 f1[05]f2 f2 f2 00 00 f2 f2 04 f3 f3 f3
  0x7f9d9d1ff080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9d9d1ff100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9d9d1ff180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9d9d1ff200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9d9d1ff280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2794880==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/Linux/recvfrom.cpp <<TAIL<<

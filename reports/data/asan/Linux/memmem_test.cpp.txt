

>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/Linux/memmem_test.cpp <<HEAD<<

=================================================================
==2791500==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fb474a00028 at pc 0x560def83fb8b bp 0x7ffc9ed2c570 sp 0x7ffc9ed2bd30
READ of size 9 at 0x7fb474a00028 thread T0
    #0 0x560def83fb8a in __interceptor_memmem.part.0 /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:734:5
    #1 0x560def8b66be in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/memmem_test.cpp:12:11
    #2 0x7fb4770f1082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x560def7872dd in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Linux/Output/memmem_test.cpp.tmp+0x1e2dd)

Address 0x7fb474a00028 is located in stack of thread T0 at offset 40 in frame
    #0 0x560def8b658f in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/memmem_test.cpp:7

  This frame has 2 object(s):
    [32, 40) 'a1' (line 8) <== Memory access at offset 40 overflows this variable
    [64, 67) 'a2' (line 9)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:734:5 in __interceptor_memmem.part.0
Shadow bytes around the buggy address:
  0x7fb4749ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb4749ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb4749ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb4749fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb4749fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7fb474a00000: f1 f1 f1 f1 00[f2]f2 f2 03 f3 f3 f3 00 00 00 00
  0x7fb474a00080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb474a00100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb474a00180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb474a00200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb474a00280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2791500==ABORTING
=================================================================
==2791613==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f4f2cc00043 at pc 0x55b41b0f3aef bp 0x7ffd071f9d90 sp 0x7ffd071f9550
READ of size 4 at 0x7f4f2cc00043 thread T0
    #0 0x55b41b0f3aee in __interceptor_memmem.part.0 /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:735:5
    #1 0x55b41b16a6de in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/memmem_test.cpp:14:11
    #2 0x7f4f2f329082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x55b41b03b2dd in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Linux/Output/memmem_test.cpp.tmp+0x1e2dd)

Address 0x7f4f2cc00043 is located in stack of thread T0 at offset 67 in frame
    #0 0x55b41b16a58f in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/memmem_test.cpp:7

  This frame has 2 object(s):
    [32, 40) 'a1' (line 8)
    [64, 67) 'a2' (line 9) <== Memory access at offset 67 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:735:5 in __interceptor_memmem.part.0
Shadow bytes around the buggy address:
  0x7f4f2cbffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4f2cbffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4f2cbffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4f2cbfff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4f2cbfff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f4f2cc00000: f1 f1 f1 f1 00 f2 f2 f2[03]f3 f3 f3 00 00 00 00
  0x7f4f2cc00080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4f2cc00100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4f2cc00180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4f2cc00200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4f2cc00280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2791613==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/Linux/memmem_test.cpp <<TAIL<<



>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/contiguous_container_crash.cpp <<HEAD<<

=================================================================
==2804104==ERROR: AddressSanitizer: container-overflow on address 0x7f9188b00940 at pc 0x560fcc7171b3 bp 0x7ffc79969bd0 sp 0x7ffc79969bc8
READ of size 8 at 0x7f9188b00940 thread T0
    #0 0x560fcc7171b2 in TestCrash /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:28:15
    #1 0x560fcc7171b2 in main /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:57:12
    #2 0x7f918ad43082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x560fcc5e72ed in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/contiguous_container_crash.cpp.tmp+0x1e2ed)

Address 0x7f9188b00940 is located in stack of thread T0 at offset 2368 in frame
    #0 0x560fcc716cbf in main /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:54

  This frame has 4 object(s):
    [32, 428) 't.i33' (line 47)
    [496, 896) 't.i26' (line 39)
    [960, 1760) 't.i24' (line 32)
    [1888, 2688) 't.i' (line 22) <== Memory access at offset 2368 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
SUMMARY: AddressSanitizer: container-overflow /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:28:15 in TestCrash
Shadow bytes around the buggy address:
  0x7f9188b00680: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f2 f2 f2 f2
  0x7f9188b00700: f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00
  0x7f9188b00780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9188b00800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9188b00880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fc fc
=>0x7f9188b00900: fc fc fc fc fc fc fc fc[fc]fc fc fc fc fc fc fc
  0x7f9188b00980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
  0x7f9188b00a00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
  0x7f9188b00a80: f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
  0x7f9188b00b00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9188b00b80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2804104==ABORTING
=================================================================
==2804226==ERROR: AddressSanitizer: bad parameters to __sanitizer_annotate_contiguous_container:
      beg     : 0x7f64f45003c0
      end     : 0x7f64f45006e0
      old_mid : 0x7f64f45006e8
      new_mid : 0x7f64f4500550
    #0 0x55f98f0beb09 in __sanitizer_annotate_contiguous_container /home/llvm/compiler-rt/lib/asan/asan_poisoning.cpp:428:5
    #1 0x55f98f106022 in BadBounds /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:34:3
    #2 0x55f98f106022 in main /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:59:5
    #3 0x7f64f671f082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #4 0x55f98efd62ed in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/contiguous_container_crash.cpp.tmp+0x1e2ed)

SUMMARY: AddressSanitizer: bad-__sanitizer_annotate_contiguous_container /home/llvm/compiler-rt/lib/asan/asan_poisoning.cpp:428:5 in __sanitizer_annotate_contiguous_container
==2804226==ABORTING
=================================================================
==2804316==ERROR: AddressSanitizer: container-overflow on address 0x7f84fb1002e0 at pc 0x56190ec9f153 bp 0x7ffe59b52070 sp 0x7ffe59b52068
READ of size 4 at 0x7f84fb1002e0 thread T0
    #0 0x56190ec9f152 in OddAlignment /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:43:15
    #1 0x56190ec9f152 in main /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:61:12
    #2 0x7f84fd2f0082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x56190eb6f2ed in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/contiguous_container_crash.cpp.tmp+0x1e2ed)

Address 0x7f84fb1002e0 is located in stack of thread T0 at offset 736 in frame
    #0 0x56190ec9ecbf in main /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:54

  This frame has 4 object(s):
    [32, 428) 't.i33' (line 47)
    [496, 896) 't.i26' (line 39) <== Memory access at offset 736 is inside this variable
    [960, 1760) 't.i24' (line 32)
    [1888, 2688) 't.i' (line 22)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
SUMMARY: AddressSanitizer: container-overflow /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:43:15 in OddAlignment
Shadow bytes around the buggy address:
  0x7f84fb100000: f1 f1 f1 f1 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f84fb100080: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f84fb100100: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f84fb100180: f8 f8 f8 f8 f8 f8 f2 f2 f2 f2 f2 f2 f2 f2 00 00
  0x7f84fb100200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f84fb100280: 00 00 00 00 00 00 00 04 fc fc fc fc[fc]fc fc fc
  0x7f84fb100300: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
  0x7f84fb100380: f2 f2 f2 f2 f2 f2 f2 f2 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f84fb100400: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f84fb100480: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f84fb100500: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2804316==ABORTING
=================================================================
==2804499==ERROR: AddressSanitizer: container-overflow on address 0x7f4ef0d00110 at pc 0x562f87b0a1a1 bp 0x7ffd13ed6170 sp 0x7ffd13ed6168
READ of size 4 at 0x7f4ef0d00110 thread T0
    #0 0x562f87b0a1a0 in OddAlignmentEnd /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:51:15
    #1 0x562f87b0a1a0 in main /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:63:12
    #2 0x7f4ef2f4e082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x562f879da2ed in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/contiguous_container_crash.cpp.tmp+0x1e2ed)

Address 0x7f4ef0d00110 is located in stack of thread T0 at offset 272 in frame
    #0 0x562f87b09cbf in main /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:54

  This frame has 4 object(s):
    [32, 428) 't.i33' (line 47) <== Memory access at offset 272 is inside this variable
    [496, 896) 't.i26' (line 39)
    [960, 1760) 't.i24' (line 32)
    [1888, 2688) 't.i' (line 22)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
SUMMARY: AddressSanitizer: container-overflow /home/llvm/compiler-rt/test/asan/TestCases/contiguous_container_crash.cpp:51:15 in OddAlignmentEnd
Shadow bytes around the buggy address:
  0x7f4ef0cffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4ef0cfff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4ef0cfff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4ef0d00000: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f4ef0d00080: 00 00 00 00 00 00 00 00 00 00 00 00 00 fc fc fc
=>0x7f4ef0d00100: fc fc[fc]fc fc fc fc fc fc fc fc fc fc fc fc fc
  0x7f4ef0d00180: fc fc fc fc fc 04 f2 f2 f2 f2 f2 f2 f2 f2 f8 f8
  0x7f4ef0d00200: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f4ef0d00280: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f4ef0d00300: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7f4ef0d00380: f2 f2 f2 f2 f2 f2 f2 f2 f8 f8 f8 f8 f8 f8 f8 f8
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2804499==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/contiguous_container_crash.cpp <<TAIL<<

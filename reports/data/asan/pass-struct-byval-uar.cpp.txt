

>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/pass-struct-byval-uar.cpp <<HEAD<<


=================================================================
==2811701==ERROR: AddressSanitizer: stack-use-after-return on address 0x7f5e8d2000a0 at pc 0x55da7328188e bp 0x7ffd75065430 sp 0x7ffd75065428
WRITE of size 4 at 0x7f5e8d2000a0 thread T0
    #0 0x55da7328188d in main /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:30:11
    #1 0x7f5e8f726082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #2 0x55da731522dd in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/pass-struct-byval-uar.cpp.tmp+0x1e2dd)

Address 0x7f5e8d2000a0 is located in stack of thread T0 at offset 32 in frame
    #0 0x55da7328158f in foo(A) /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:24

  This frame has 1 object(s):
    [32, 64) 'a.byval' <== Memory access at offset 32 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-return /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:30:11 in main
Shadow bytes around the buggy address:
  0x7f5e8d1ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5e8d1ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5e8d1fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5e8d1fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5e8d200000: f1 f1 f1 f1 00 00 00 00 f3 f3 f3 f3 00 00 00 00
=>0x7f5e8d200080: f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x7f5e8d200100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5e8d200180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5e8d200200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5e8d200280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f5e8d200300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2811701==ABORTING

=================================================================
==2812435==ERROR: AddressSanitizer: stack-use-after-return on address 0x7f330de000a0 at pc 0x55e411654850 bp 0x7ffeb7c00d70 sp 0x7ffeb7c00d68
WRITE of size 4 at 0x7f330de000a0 thread T0
    #0 0x55e41165484f in main /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:30:11
    #1 0x7f3310362082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #2 0x55e4115252dd in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxConfig/TestCases/Output/pass-struct-byval-uar.cpp.tmp+0x1e2dd)

Address 0x7f330de000a0 is located in stack of thread T0 at offset 32 in frame
    #0 0x55e41165458f in foo(A) /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:24

  This frame has 1 object(s):
    [32, 64) 'a.byval' <== Memory access at offset 32 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-return /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:30:11 in main
Shadow bytes around the buggy address:
  0x7f330ddffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f330ddffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f330ddfff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f330ddfff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f330de00000: f1 f1 f1 f1 00 00 00 00 f3 f3 f3 f3 00 00 00 00
=>0x7f330de00080: f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x7f330de00100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f330de00180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f330de00200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f330de00280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f330de00300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2812435==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/pass-struct-byval-uar.cpp <<TAIL<<


>>HEAD>> AddressSanitizer-x86_64-linux :: TestCases/pass-struct-byval-uar.cpp <<HEAD<<

/home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:25:11: warning: address of stack memory associated with parameter 'a' returned [-Wreturn-stack-address]
  return &a;
          ^
1 warning generated.
/home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:25:11: warning: address of stack memory associated with parameter 'a' returned [-Wreturn-stack-address]
  return &a;
          ^
1 warning generated.
/home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:25:11: warning: address of stack memory associated with parameter 'a' returned [-Wreturn-stack-address]
  return &a;
          ^
1 warning generated.



>>TAIL>> AddressSanitizer-x86_64-linux :: TestCases/pass-struct-byval-uar.cpp <<TAIL<<

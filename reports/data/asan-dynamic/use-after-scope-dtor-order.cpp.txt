

>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/use-after-scope-dtor-order.cpp <<HEAD<<

=================================================================
==2740605==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7fd084900040 at pc 0x55d553fd477c bp 0x7ffd1a4b8500 sp 0x7ffd1a4b84f8
READ of size 4 at 0x7fd084900040 thread T0
    #0 0x55d553fd477b in IntHolder::~IntHolder() /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-dtor-order.cpp:8:27
    #1 0x55d553fd469e in main /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-dtor-order.cpp:25:1
    #2 0x7fd086e8d082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x55d553fd316d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Output/use-after-scope-dtor-order.cpp.tmp+0x116d)

Address 0x7fd084900040 is located in stack of thread T0 at offset 64 in frame
    #0 0x55d553fd45af in main /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-dtor-order.cpp:18

  This frame has 2 object(s):
    [32, 40) 'holder' (line 21)
    [64, 68) 'x' (line 22) <== Memory access at offset 64 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-scope /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-dtor-order.cpp:8:27 in IntHolder::~IntHolder()
Shadow bytes around the buggy address:
  0x7fd0848ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd0848ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd0848ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd0848fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd0848fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7fd084900000: f1 f1 f1 f1 00 f2 f2 f2[f8]f3 f3 f3 00 00 00 00
  0x7fd084900080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd084900100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd084900180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd084900200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fd084900280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2740605==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/use-after-scope-dtor-order.cpp <<TAIL<<

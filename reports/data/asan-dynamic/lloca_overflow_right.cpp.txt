

>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/alloca_overflow_right.cpp <<HEAD<<

=================================================================
==2731008==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffe8e469221 at pc 0x56025b3be6cc bp 0x7ffe8e4691d0 sp 0x7ffe8e4691c8
WRITE of size 1 at 0x7ffe8e469221 thread T0
    #0 0x56025b3be6cb in foo(int, int) /home/llvm/compiler-rt/test/asan/TestCases/alloca_overflow_right.cpp:10:14
    #1 0x56025b3be734 in main /home/llvm/compiler-rt/test/asan/TestCases/alloca_overflow_right.cpp:16:3
    #2 0x7f9a5c58e082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x56025b3bd18d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Output/alloca_overflow_right.cpp.tmp+0x118d)

Address 0x7ffe8e469221 is located in stack of thread T0
SUMMARY: AddressSanitizer: dynamic-stack-buffer-overflow /home/llvm/compiler-rt/test/asan/TestCases/alloca_overflow_right.cpp:10:14 in foo(int, int)
Shadow bytes around the buggy address:
  0x7ffe8e468f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffe8e469000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffe8e469080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffe8e469100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffe8e469180: 00 00 00 00 00 00 00 00 00 00 00 00 ca ca ca ca
=>0x7ffe8e469200: 00 02 cb cb[cb]cb cb cb 00 00 00 00 00 00 00 00
  0x7ffe8e469280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffe8e469300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffe8e469380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffe8e469400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ffe8e469480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2731008==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/alloca_overflow_right.cpp <<TAIL<<



>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/strcasestr-1.c <<HEAD<<

=================================================================
==2738625==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f6cee600032 at pc 0x7f6cf1278751 bp 0x7ffc6b1fcd00 sp 0x7ffc6b1fc4c0
READ of size 4 at 0x7f6cee600032 thread T0
    #0 0x7f6cf1278750 in StrstrCheck(void*, char*, char const*, char const*) /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:628:5
    #1 0x7f6cf12f9e5a in strcasestr /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:666:16
    #2 0x564a3fb17710 in main /home/llvm/compiler-rt/test/asan/TestCases/strcasestr-1.c:21:7
    #3 0x7f6cf100d082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #4 0x564a3fb161ad in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Output/strcasestr-1.c.tmp+0x11ad)

Address 0x7f6cee600032 is located in stack of thread T0 at offset 50 in frame
    #0 0x564a3fb175ef in main /home/llvm/compiler-rt/test/asan/TestCases/strcasestr-1.c:16

  This frame has 2 object(s):
    [32, 34) 's2' (line 18)
    [48, 52) 's1' (line 19) <== Memory access at offset 50 partially overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:628:5 in StrstrCheck(void*, char*, char const*, char const*)
Shadow bytes around the buggy address:
  0x7f6cee5ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6cee5ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6cee5ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6cee5fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6cee5fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f6cee600000: f1 f1 f1 f1 02 f2[02]f3 00 00 00 00 00 00 00 00
  0x7f6cee600080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6cee600100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6cee600180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6cee600200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6cee600280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2738625==ABORTING
==2738963==WARNING: strlen interceptor is enabled even though replace_str=0. Use intercept_strlen=0 to disable it.==2738963==WARNING: strchr* interceptors are enabled even though replace_str=0. Use intercept_strchr=0 to disable them.==2738963==WARNING: strndup* interceptors are enabled even though replace_str=0. Use intercept_strndup=0 to disable them.


>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/strcasestr-1.c <<TAIL<<

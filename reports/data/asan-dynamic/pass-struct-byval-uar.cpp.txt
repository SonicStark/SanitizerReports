

>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/pass-struct-byval-uar.cpp <<HEAD<<


=================================================================
==2737287==ERROR: AddressSanitizer: stack-use-after-return on address 0x7f9f204000a0 at pc 0x55fe38fc78ce bp 0x7fffd6805850 sp 0x7fffd6805848
WRITE of size 4 at 0x7f9f204000a0 thread T0
    #0 0x55fe38fc78cd in main /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:30:11
    #1 0x7f9f229a4082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #2 0x55fe38fc618d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Output/pass-struct-byval-uar.cpp.tmp+0x118d)

Address 0x7f9f204000a0 is located in stack of thread T0 at offset 32 in frame
    #0 0x55fe38fc75cf in foo(A) /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:24

  This frame has 1 object(s):
    [32, 64) 'a.byval' <== Memory access at offset 32 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-return /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:30:11 in main
Shadow bytes around the buggy address:
  0x7f9f203ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f203ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f203fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f203fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f20400000: f1 f1 f1 f1 00 00 00 00 f3 f3 f3 f3 00 00 00 00
=>0x7f9f20400080: f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x7f9f20400100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f20400180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f20400200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f20400280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f20400300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2737287==ABORTING

=================================================================
==2738446==ERROR: AddressSanitizer: stack-use-after-return on address 0x7fc0a11000a0 at pc 0x5641848a4890 bp 0x7ffff443ab50 sp 0x7ffff443ab48
WRITE of size 4 at 0x7fc0a11000a0 thread T0
    #0 0x5641848a488f in main /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:30:11
    #1 0x7fc0a3674082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #2 0x5641848a318d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Output/pass-struct-byval-uar.cpp.tmp+0x118d)

Address 0x7fc0a11000a0 is located in stack of thread T0 at offset 32 in frame
    #0 0x5641848a45cf in foo(A) /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:24

  This frame has 1 object(s):
    [32, 64) 'a.byval' <== Memory access at offset 32 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-return /home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:30:11 in main
Shadow bytes around the buggy address:
  0x7fc0a10ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc0a10ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc0a10fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc0a10fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc0a1100000: f1 f1 f1 f1 00 00 00 00 f3 f3 f3 f3 00 00 00 00
=>0x7fc0a1100080: f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x7fc0a1100100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc0a1100180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc0a1100200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc0a1100280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc0a1100300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2738446==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/pass-struct-byval-uar.cpp <<TAIL<<


>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/pass-struct-byval-uar.cpp <<HEAD<<

/home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:25:11: warning: address of stack memory associated with parameter 'a' returned [-Wreturn-stack-address]
  return &a;
          ^
1 warning generated.
/home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:25:11: warning: address of stack memory associated with parameter 'a' returned [-Wreturn-stack-address]
  return &a;
          ^
1 warning generated.
/home/llvm/compiler-rt/test/asan/TestCases/pass-struct-byval-uar.cpp:25:11: warning: address of stack memory associated with parameter 'a' returned [-Wreturn-stack-address]
  return &a;
          ^
1 warning generated.



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/pass-struct-byval-uar.cpp <<TAIL<<

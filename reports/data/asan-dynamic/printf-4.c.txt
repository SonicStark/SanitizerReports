

>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/printf-4.c <<HEAD<<

before sprintf
=================================================================
==2737586==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ff307f00062 at pc 0x7ff30a9eb6a4 bp 0x7fffbe6e15c0 sp 0x7fffbe6e0d80
WRITE of size 15 at 0x7ff307f00062 thread T0
    #0 0x7ff30a9eb6a3 in __interceptor_vsprintf /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1741:1
    #1 0x7ff30a9eb99e in sprintf /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1784:1
    #2 0x55d3341987c1 in main /home/llvm/compiler-rt/test/asan/TestCases/printf-4.c:17:3
    #3 0x7ff30a746082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #4 0x55d33419719d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Output/printf-4.c.tmp+0x119d)

Address 0x7ff307f00062 is located in stack of thread T0 at offset 98 in frame
    #0 0x55d3341985df in main /home/llvm/compiler-rt/test/asan/TestCases/printf-4.c:10

  This frame has 5 object(s):
    [32, 33) 'c' (line 11)
    [48, 52) 'x' (line 12)
    [64, 68) 'f' (line 13)
    [80, 83) 's' (line 14)
    [96, 98) 'buf' (line 15) <== Memory access at offset 98 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1741:1 in __interceptor_vsprintf
Shadow bytes around the buggy address:
  0x7ff307effd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff307effe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff307effe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff307efff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff307efff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7ff307f00000: f1 f1 f1 f1 01 f2 04 f2 04 f2 03 f2[02]f3 f3 f3
  0x7ff307f00080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff307f00100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff307f00180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff307f00200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff307f00280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2737586==ABORTING
before sprintf
=================================================================
==2738078==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f6eaf700062 at pc 0x7f6eb224a6a4 bp 0x7ffedcfa4140 sp 0x7ffedcfa3900
WRITE of size 15 at 0x7f6eaf700062 thread T0
    #0 0x7f6eb224a6a3 in __interceptor_vsprintf /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1741:1
    #1 0x7f6eb224a99e in sprintf /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1784:1
    #2 0x563ad63ee7c1 in main /home/llvm/compiler-rt/test/asan/TestCases/printf-4.c:17:3
    #3 0x7f6eb1fa5082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #4 0x563ad63ed19d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Output/printf-4.c.tmp+0x119d)

Address 0x7f6eaf700062 is located in stack of thread T0 at offset 98 in frame
    #0 0x563ad63ee5df in main /home/llvm/compiler-rt/test/asan/TestCases/printf-4.c:10

  This frame has 5 object(s):
    [32, 33) 'c' (line 11)
    [48, 52) 'x' (line 12)
    [64, 68) 'f' (line 13)
    [80, 83) 's' (line 14)
    [96, 98) 'buf' (line 15) <== Memory access at offset 98 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1741:1 in __interceptor_vsprintf
Shadow bytes around the buggy address:
  0x7f6eaf6ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6eaf6ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6eaf6ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6eaf6fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6eaf6fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f6eaf700000: f1 f1 f1 f1 01 f2 04 f2 04 f2 03 f2[02]f3 f3 f3
  0x7f6eaf700080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6eaf700100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6eaf700180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6eaf700200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6eaf700280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2738078==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/printf-4.c <<TAIL<<


>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/printf-4.c <<HEAD<<

/home/llvm/compiler-rt/test/asan/TestCases/printf-4.c:17:3: warning: 'sprintf' will always overflow; destination buffer has size 2, but format string expands to at least 12 [-Wfortify-source]
  sprintf((char *)buf, "%c %d %.3f %s\n", c, x, f, s);
  ^
1 warning generated.



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/printf-4.c <<TAIL<<

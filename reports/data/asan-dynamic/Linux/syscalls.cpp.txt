

>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/Linux/syscalls.cpp <<HEAD<<

=================================================================
==2722027==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x7fddd0e0001f at pc 0x7fddd35e0b9f bp 0x7ffead4b63d0 sp 0x7ffead4b5ba0
READ of size 56 at 0x7fddd0e0001f thread T0
    #0 0x7fddd35e0b9e in __sanitizer_syscall_pre_impl_recvmsg /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_syscalls.inc:157:3
    #1 0x5613692a56dc in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/syscalls.cpp:17:3
    #2 0x7fddd2fa6082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x5613692a417d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Linux/Output/syscalls.cpp.tmp+0x117d)

Address 0x7fddd0e0001f is located in stack of thread T0 at offset 31 in frame
    #0 0x5613692a55bf in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/syscalls.cpp:15

  This frame has 1 object(s):
    [32, 1032) 'buf' (line 16) <== Memory access at offset 31 partially underflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-underflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_syscalls.inc:157:3 in __sanitizer_syscall_pre_impl_recvmsg
Shadow bytes around the buggy address:
  0x7fddd0dffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0dffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0dffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0dfff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0dfff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7fddd0e00000: f1 f1 f1[f1]00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0e00080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0e00100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0e00180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0e00200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fddd0e00280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2722027==ABORTING
=================================================================
==2723602==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x7fb10910001f at pc 0x7fb10b8a2b9f bp 0x7ffce3b8d6f0 sp 0x7ffce3b8cec0
READ of size 56 at 0x7fb10910001f thread T0
    #0 0x7fb10b8a2b9e in __sanitizer_syscall_pre_impl_recvmsg /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_syscalls.inc:157:3
    #1 0x55fac48ff689 in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/syscalls.cpp:17:3
    #2 0x7fb10b268082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x55fac48fe17d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Linux/Output/syscalls.cpp.tmp+0x117d)

Address 0x7fb10910001f is located in stack of thread T0 at offset 31 in frame
    #0 0x55fac48ff5bf in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/syscalls.cpp:15

  This frame has 1 object(s):
    [32, 1032) 'buf' (line 16) <== Memory access at offset 31 partially underflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-underflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_syscalls.inc:157:3 in __sanitizer_syscall_pre_impl_recvmsg
Shadow bytes around the buggy address:
  0x7fb1090ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb1090ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb1090ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb1090fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb1090fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7fb109100000: f1 f1 f1[f1]00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb109100080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb109100100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb109100180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb109100200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fb109100280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2723602==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/Linux/syscalls.cpp <<TAIL<<

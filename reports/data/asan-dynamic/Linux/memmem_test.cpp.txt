

>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/Linux/memmem_test.cpp <<HEAD<<

=================================================================
==2720601==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fc7c7200028 at pc 0x7fc7c9de30bb bp 0x7ffd46b34990 sp 0x7ffd46b34150
READ of size 9 at 0x7fc7c7200028 thread T0
    #0 0x7fc7c9de30ba in __interceptor_memmem.part.0 /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:734:5
    #1 0x55e4cdd5a6ee in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/memmem_test.cpp:12:11
    #2 0x7fc7c97aa082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x55e4cdd5917d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Linux/Output/memmem_test.cpp.tmp+0x117d)

Address 0x7fc7c7200028 is located in stack of thread T0 at offset 40 in frame
    #0 0x55e4cdd5a5bf in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/memmem_test.cpp:7

  This frame has 2 object(s):
    [32, 40) 'a1' (line 8) <== Memory access at offset 40 overflows this variable
    [64, 67) 'a2' (line 9)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:734:5 in __interceptor_memmem.part.0
Shadow bytes around the buggy address:
  0x7fc7c71ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc7c71ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc7c71ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc7c71fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc7c71fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7fc7c7200000: f1 f1 f1 f1 00[f2]f2 f2 03 f3 f3 f3 00 00 00 00
  0x7fc7c7200080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc7c7200100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc7c7200180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc7c7200200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fc7c7200280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2720601==ABORTING
=================================================================
==2720846==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f6004500043 at pc 0x7f60070fe01f bp 0x7ffe28c1c710 sp 0x7ffe28c1bed0
READ of size 4 at 0x7f6004500043 thread T0
    #0 0x7f60070fe01e in __interceptor_memmem.part.0 /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:735:5
    #1 0x557b6135f70e in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/memmem_test.cpp:14:11
    #2 0x7f6006ac5082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x557b6135e17d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Linux/Output/memmem_test.cpp.tmp+0x117d)

Address 0x7f6004500043 is located in stack of thread T0 at offset 67 in frame
    #0 0x557b6135f5bf in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/memmem_test.cpp:7

  This frame has 2 object(s):
    [32, 40) 'a1' (line 8)
    [64, 67) 'a2' (line 9) <== Memory access at offset 67 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:735:5 in __interceptor_memmem.part.0
Shadow bytes around the buggy address:
  0x7f60044ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f60044ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f60044ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f60044fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f60044fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f6004500000: f1 f1 f1 f1 00 f2 f2 f2[03]f3 f3 f3 00 00 00 00
  0x7f6004500080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6004500100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6004500180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6004500200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f6004500280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2720846==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/Linux/memmem_test.cpp <<TAIL<<



>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/Linux/ptrace.cpp <<HEAD<<

7f8ba862a100
37f
=================================================================
==2721940==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ff0760000f8 at pc 0x7ff0788e3681 bp 0x7ffdadb36230 sp 0x7ffdadb359f0
WRITE of size 216 at 0x7ff0760000f8 thread T0
    #0 0x7ff0788e3680 in __interceptor_ptrace /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:3526:7
    #1 0x55ae6807b86a in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/ptrace.cpp:115:11
    #2 0x7ff0782af082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #3 0x55ae6807a1fd in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Linux/Output/ptrace.cpp.tmp+0x11fd)

Address 0x7ff0760000f8 is located in stack of thread T0 at offset 248 in frame
    #0 0x55ae6807b63f in main /home/llvm/compiler-rt/test/asan/TestCases/Linux/ptrace.cpp:87

  This frame has 3 object(s):
    [32, 248) 'regs' (line 95)
    [320, 328) 'pregs' (line 96) <== Memory access at offset 248 partially underflows this variable
    [352, 864) 'fpregs' (line 121) <== Memory access at offset 248 partially underflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/llvm/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:3526:7 in __interceptor_ptrace
Shadow bytes around the buggy address:
  0x7ff075fffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff075fffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff075ffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff075ffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7ff076000000: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7ff076000080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00[f2]
  0x7ff076000100: f2 f2 f2 f2 f2 f2 f2 f2 00 f2 f2 f2 f8 f8 f8 f8
  0x7ff076000180: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7ff076000200: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7ff076000280: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7ff076000300: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f3 f3 f3 f3
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2721940==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/Linux/ptrace.cpp <<TAIL<<

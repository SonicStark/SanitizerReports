

>>HEAD>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/use-after-scope-if.cpp <<HEAD<<

=================================================================
==2740766==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7fea96100024 at pc 0x563f7e1fd6c6 bp 0x7fff6bb02790 sp 0x7fff6bb02788
READ of size 4 at 0x7fea96100024 thread T0
    #0 0x563f7e1fd6c5 in main /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-if.cpp:11:10
    #1 0x7fea986c5082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16
    #2 0x563f7e1fc15d in _start (/home/llvm/mybuild/projects/compiler-rt/test/asan/X86_64LinuxDynamicConfig/TestCases/Output/use-after-scope-if.cpp.tmp+0x115d)

Address 0x7fea96100024 is located in stack of thread T0 at offset 36 in frame
    #0 0x563f7e1fd59f in main /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-if.cpp:6

  This frame has 1 object(s):
    [32, 52) 'x' (line 8) <== Memory access at offset 36 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-scope /home/llvm/compiler-rt/test/asan/TestCases/use-after-scope-if.cpp:11:10 in main
Shadow bytes around the buggy address:
  0x7fea960ffd80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fea960ffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fea960ffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fea960fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fea960fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7fea96100000: f1 f1 f1 f1[f8]f8 f8 f3 f3 f3 f3 f3 00 00 00 00
  0x7fea96100080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fea96100100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fea96100180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fea96100200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7fea96100280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2740766==ABORTING



>>TAIL>> AddressSanitizer-x86_64-linux-dynamic :: TestCases/use-after-scope-if.cpp <<TAIL<<
